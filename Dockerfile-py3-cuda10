FROM nvidia/cuda:10.0-devel-ubuntu18.04

ARG OPENCV_VERSION=3.4.14

RUN apt-get update && apt-get upgrade -y &&\
    # Install build tools, build dependencies and python
    apt-get install -y \
	    python-pip \
        build-essential \
        cmake \
        git \
        wget \
        unzip \
        yasm \
        pkg-config \
        libswscale-dev \
        libtbb2 \
        libtbb-dev \
        libjpeg-dev \
        libpng-dev \
        libtiff-dev \
        libavformat-dev \
        libpq-dev \
        libxine2-dev \
        libglew-dev \
        libtiff5-dev \
        zlib1g-dev \
        libjpeg-dev \
        libavcodec-dev \
        libavformat-dev \
        libavutil-dev \
        libpostproc-dev \
        libswscale-dev \
        libeigen3-dev \
        libtbb-dev \
        libgtk2.0-dev \
        pkg-config \
        ## Python
        python-dev \
        python-numpy \
        python3-dev \
        python3-numpy \
    && rm -rf /var/lib/apt/lists/*

RUN cd /opt/ &&\
    # Download and unzip OpenCV and opencv_contrib and delte zip files
    wget https://github.com/opencv/opencv/archive/$OPENCV_VERSION.zip &&\
    unzip $OPENCV_VERSION.zip &&\
    rm $OPENCV_VERSION.zip &&\
    wget https://github.com/opencv/opencv_contrib/archive/$OPENCV_VERSION.zip &&\
    unzip ${OPENCV_VERSION}.zip &&\
    rm ${OPENCV_VERSION}.zip &&\
    # Create build folder and switch to it
    mkdir /opt/opencv-${OPENCV_VERSION}/build && cd /opt/opencv-${OPENCV_VERSION}/build &&\
    # Cmake configure
    cmake \
        -DOPENCV_EXTRA_MODULES_PATH=/opt/opencv_contrib-${OPENCV_VERSION}/modules \
        -DWITH_CUDA=ON \
        -DCMAKE_BUILD_TYPE=RELEASE \
        # Install path will be /usr/local/lib (lib is implicit)
        -DCMAKE_INSTALL_PREFIX=/usr/local \
        .. &&\
    # Make
    make -j"$(nproc)" && \
    # Install to /usr/local/lib
    make install && \
    ldconfig &&\
    # Remove OpenCV sources and build folder
    rm -rf /opt/opencv-${OPENCV_VERSION} && rm -rf /opt/opencv_contrib-${OPENCV_VERSION}
#Eigen Install
RUN cd /tmp/ && apt-get -y update && \
#    apt-get -y install libeigen2.dev && \
#    apt-get -y install libeigen3.dev && \
    wget https://gitlab.com/libeigen/eigen/-/archive/3.4.0/eigen-3.4.0.zip -O eigen3.zip && \
    unzip eigen3.zip  && \
    cd eigen-3.4.0 && \
    mkdir build && \
    cd build/ && \
    cmake ../ && \
    make && \
    make install && \
    cd /usr/local/include/ && \
    ln -sf  eigen3/Eigen/ Eigen && \
    ldconfig \
#Pangolin Install
RUN apt-get -y update && \
    apt-get -y install libglew-dev && \
    apt-get -y install libboost-dev libboost-thread-dev libboost-filesystem-dev && \
    apt-get -y install ffmpeg libavcodec-dev libavutil-dev libavformat-dev libswscale-dev && \
    apt-get -y install libpng-dev && \
    git clone https://github.com/stevenlovegrove/Pangolin.git && \
    cd Pangolin && \
    mkdir build && cd build && \
    cmake -DCPP11_NO_BOOST=1 .. && \
    make -j && \
    make install && \
    ldconfig && \
#Sophus
    #fmt
    cd /tmp/ && apt-get -y update && \
    wget https://github.com/fmtlib/fmt/releases/download/8.1.1/fmt-8.1.1.zip && \
    unzip fmt-8.1.1.zip && \
    cd fmt-8.1.1 && \
    mkdir build && \
    cd build && \
    cmake .. && \
    make && \
    make install && \
    #Ceres Install
    cd /tmp/ && apt-get -y update && \
    apt-get -y install libgoogle-glog-dev libgflags-dev && \
    # Use ATLAS for BLAS & LAPACK
    apt-get -y install libatlas-base-dev && \
    # Eigen3
    apt-get -y install libeigen3-dev libmetis-dev && \
    # SuiteSparse and CXSparse (optional)
    apt-get -y install libsuitesparse-dev libv4l-dev libgl1-mesa-glx && \
    git clone https://ceres-solver.googlesource.com/ceres-solver && \
    cd ceres-solver && mkdir build && cd build && cmake .. && make && make install && \
    #Sophus Install
    cd /tmp/ && git clone https://github.com/strasdat/Sophus && cd Sophus && mkdir build && cd build && cmake .. && make && make install && \
    ldconfig



