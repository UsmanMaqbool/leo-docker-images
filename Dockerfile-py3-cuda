# https://www.learnopencv.com/install-opencv3-on-ubuntu/

# FROM nvidia/cuda:10.1-devel-ubuntu18.04
FROM nvidia/cuda:11.6.2-devel-ubuntu18.04
LABEL maintainer "usmanmaqbool@outlook.com"
ENV OPENCV_VERSION 3.4.2

# Install all dependencies for OpenCV
RUN apt-get -y update && \
    apt-get -y install \
        python3 \
        python3-dev \
        git \
        wget \
        unzip \
        cmake \
        build-essential \
        pkg-config \
        software-properties-common \
        gfortran \
        libgtk2.0-dev \
        libavcodec-dev \
        libavformat-dev \
        libswscale-dev \
        libjpeg-dev \
        libpng-dev \
        libtiff-dev \
        libv4l-dev \ 
        libgl1-mesa-glx \
    && \
# install python dependencies
    wget https://bootstrap.pypa.io/pip/3.6/get-pip.py && \
    python3 get-pip.py && \
    rm get-pip.py && \
    pip3 install numpy \
    && \
# Install OpenCV
    wget https://github.com/opencv/opencv/archive/$OPENCV_VERSION.zip -O opencv3.zip && \
    unzip -q opencv3.zip && \
    mv /opencv-$OPENCV_VERSION /opencv && \
    rm opencv3.zip && \
    wget https://github.com/opencv/opencv_contrib/archive/$OPENCV_VERSION.zip -O opencv_contrib3.zip && \
    unzip -q opencv_contrib3.zip && \
    mv /opencv_contrib-$OPENCV_VERSION /opencv_contrib && \
    rm opencv_contrib3.zip \
    && \
# Prepare build
    mkdir /opencv/build && cd /opencv/build && \
    cmake -D CMAKE_BUILD_TYPE=RELEASE \
      -D BUILD_PYTHON_SUPPORT=ON \
      -D CMAKE_INSTALL_PREFIX=/usr/local \
      -D OPENCV_EXTRA_MODULES_PATH=/opencv_contrib/modules \
      -D BUILD_EXAMPLES=OFF \
      -D PYTHON_DEFAULT_EXECUTABLE=/usr/bin/python3 \
      -D BUILD_opencv_python3=ON \
      -D BUILD_opencv_python2=OFF \
      -D WITH_IPP=OFF \
      -D WITH_FFMPEG=ON \
      -D WITH_CUDA=ON \
      -D CUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-8.0 \
      -D WITH_CUBLAS=ON \
      -D WITH_V4L=ON .. \
    && \
# Install
    cd /opencv/build && \
    make -j$(nproc) && \
    make install && \
    ldconfig \
    && \
#Eigen Install
    cd /tmp/ && apt-get -y update && \
#    apt-get -y install libeigen2.dev && \
#    apt-get -y install libeigen3.dev && \
    wget https://gitlab.com/libeigen/eigen/-/archive/3.3.7/eigen-3.3.7.zip && \
    unzip eigen-3.3.7.zip  && \
    cd eigen-3.3.7 && \
    mkdir build && \
    cd build/ && \
    cmake ../ && \
    make && \
    make install && \
    cd /usr/local/include/ && \
    ln -sf  eigen3/Eigen/ Eigen && \
    ldconfig && \
#Pangolin Install
    cd /tmp/ && apt-get -y update && \
    apt-get -y install libglew-dev && \
    apt-get -y install libboost-dev libboost-thread-dev libboost-filesystem-dev && \
    apt-get -y install ffmpeg libavcodec-dev libavutil-dev libavformat-dev libswscale-dev && \
    apt-get -y install libpng-dev && \
    git clone https://github.com/stevenlovegrove/Pangolin.git && \
    cd Pangolin && \
    mkdir build && cd build && \
    cmake -DCPP11_NO_BOOST=1 .. && \
    make -j && \
    make install && \
    ldconfig && \
#Sophus
    #fmt
    cd /tmp/ && apt-get -y update && \
    wget https://github.com/fmtlib/fmt/releases/download/8.1.1/fmt-8.1.1.zip && \
    unzip fmt-8.1.1.zip && \
    cd fmt-8.1.1 && \
    mkdir build && \
    cd build && \
    cmake .. && \
    make && \
    make install && \
    #Ceres Install
    cd /tmp/ && apt-get -y update && \
    apt-get -y install libgoogle-glog-dev libgflags-dev && \
    # Use ATLAS for BLAS & LAPACK
    apt-get -y install libatlas-base-dev && \
    # Eigen3
    apt-get -y install libeigen3-dev && \
    # SuiteSparse and CXSparse (optional)
    apt-get -y install libsuitesparse-dev && \
    git clone https://ceres-solver.googlesource.com/ceres-solver && \
    cd ceres-solver && mkdir build && cd build && cmake .. && make && make install && \
    #Sophus Install
    cd /tmp/ && git clone https://github.com/strasdat/Sophus && cd Sophus && mkdir build && cd build && cmake .. && make && make install && \
    ldconfig && \
# Clean
    apt-get -y remove \
        python3-dev \
        libatlas-base-dev \
        gfortran \
        libgtk2.0-dev \
        libavcodec-dev \
        libavformat-dev \
        libswscale-dev \
        libjpeg-dev \
        libpng-dev \
        libtiff-dev \
        libv4l-dev \
    && \
    apt-get clean && \
    rm -rf /opencv /opencv_contrib /var/lib/apt/lists/* && \
    echo "alias python=python3" >> ~/.bashrc 
#    pip3 install scikit-learn h5py ibllib IBL-pipeline && \
#    pip3 install --upgrade torch==1.8.0+cu111 torchvision==0.9.0+cu111 torchaudio==0.8.0 -f https://download.pytorch.org/whl/torch_stable.html && \
#    python setup.py develop
# Define default command.
#CMD ["python3", "--version"]
#echo "alias vps='ssh -X user@example.com'" >> ~/.bashrc
